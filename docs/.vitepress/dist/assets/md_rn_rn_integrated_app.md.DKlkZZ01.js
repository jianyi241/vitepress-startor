import{_ as d,c as a,o as e,ae as r}from"./chunks/framework.Cd-3tpCq.js";const i="/assets/deepseek_mermaid_20250723_973db9.BZ7DPK0w.png",o="/assets/deepseek_mermaid_20250722_25be6a.CoyXsuP0.png",m=JSON.parse('{"title":"React Native 集成原生应用完整方案（Bundle方式）","description":"","frontmatter":{},"headers":[],"relativePath":"md/rn/rn_integrated_app.md","filePath":"md/rn/rn_integrated_app.md"}'),l={name:"md/rn/rn_integrated_app.md"};function n(h,t,s,c,b,u){return e(),a("div",null,t[0]||(t[0]=[r('<h1 id="react-native-集成原生应用完整方案-bundle方式" tabindex="-1">React Native 集成原生应用完整方案（Bundle方式） <a class="header-anchor" href="#react-native-集成原生应用完整方案-bundle方式" aria-label="Permalink to &quot;React Native 集成原生应用完整方案（Bundle方式）&quot;">​</a></h1><p>在此之前需要先了解一下为什么要将原生App的一些模块抽离出来使用RN集成：</p><ol><li><strong>体验一致性差：</strong> 因系统特性差异，三端实现逻辑和 UI 效果难以统一，使用RN 可有效解决此类问题</li><li><strong>更新迭代周期长：</strong> 应用商店（如App Store、Google Play）审核的是原生部分的安装包（IPA/APK）。RN 热更新通过动态下载JS Bundle文件实现更新，无需重新提交安装包，因此不触发审核流程，可以实现快速维护升级。</li><li><strong>开发成本高：</strong> 同一需求需在 iOS、Android 及鸿蒙（如鸿蒙或其他平台）分别开发，存在重复劳动，且维护成本随业务复杂度线性增长。</li></ol><div class="tip custom-block"><p class="custom-block-title">提示</p><p>注意：热更新仅能更新 JavaScript代码、资源文件（图片/字体等） 及部分原生模块配置（需提前预埋）。无法修改原生二进制代码</p></div><p>JSBundle方式集成架构简图</p><img src="'+i+'" width="200"><h2 id="一、整体架构设计" tabindex="-1">一、整体架构设计 <a class="header-anchor" href="#一、整体架构设计" aria-label="Permalink to &quot;一、整体架构设计&quot;">​</a></h2><h3 id="_1-架构概览" tabindex="-1">1. 架构概览 <a class="header-anchor" href="#_1-架构概览" aria-label="Permalink to &quot;1. 架构概览&quot;">​</a></h3><p>使用”原生APP+RN模块“方式，原生APP实现核心模块、支付等，RN模块实现通用的业务，方便热更新快速迭代。</p><img src="'+o+'"><h3 id="核心开发工具" tabindex="-1">核心开发工具 <a class="header-anchor" href="#核心开发工具" aria-label="Permalink to &quot;核心开发工具&quot;">​</a></h3><table tabindex="0"><thead><tr><th>分类</th><th>工具名称</th><th>适用平台</th><th>功能描述</th><th>稳定性评级</th></tr></thead><tbody><tr><td>开发框架</td><td>react-native@0.79.0</td><td>全平台</td><td>跨平台开发核心框架</td><td>⭐⭐⭐⭐⭐</td></tr><tr><td>鸿蒙支持</td><td>react-native-harmony</td><td>鸿蒙</td><td>RN鸿蒙适配器</td><td>⭐⭐⭐</td></tr><tr><td>状态管理</td><td>redux-toolkit<br>mobx<br>recoil</td><td>全平台</td><td>全局状态管理</td><td>⭐⭐⭐⭐⭐</td></tr><tr><td>路由管理</td><td>react-navigation <br> react-native-navigation</td><td>全平台</td><td>页面导航控制</td><td>⭐⭐⭐⭐⭐</td></tr><tr><td>网络请求</td><td>axios <br> react-native-axios</td><td>全平台</td><td>HTTP请求与缓存</td><td>⭐⭐⭐⭐⭐</td></tr><tr><td>本地存储</td><td>react-native-async-storage <br> async-storage</td><td>全平台</td><td>HTTP请求与缓存</td><td>⭐⭐⭐⭐⭐</td></tr></tbody></table><h3 id="_2-架构说明" tabindex="-1">2. 架构说明 <a class="header-anchor" href="#_2-架构说明" aria-label="Permalink to &quot;2. 架构说明&quot;">​</a></h3><ol><li><strong>职责清晰：</strong> 原生层聚焦稳定性和核心能力，RN 层聚焦业务灵活性，桥接层确保两者无缝通信。</li><li><strong>渐进式集成：</strong> 无需重构现有原生代码，通过新增 RN 模块逐步替换或补充业务，降低风险。</li><li><strong>热更新支持：</strong> RN 业务代码打包为 JS Bundle，通过服务器动态下发，原生代码仍走应用商店更新（核心能力变更时）</li></ol><h3 id="原生集成工具-核心依赖与第三方库" tabindex="-1">原生集成工具，核心依赖与第三方库 <a class="header-anchor" href="#原生集成工具-核心依赖与第三方库" aria-label="Permalink to &quot;原生集成工具，核心依赖与第三方库&quot;">​</a></h3><table tabindex="0"><thead><tr><th>分类</th><th>工具名称</th><th>适用平台</th><th>功能描述</th><th>稳定性评级</th></tr></thead><tbody><tr><td>原生桥接</td><td>react-native-bridge-builder<br>react-native-bridge</td><td>Android/iOS</td><td>桥接代码生成</td><td>⭐⭐⭐⭐</td></tr><tr><td>鸿蒙桥接</td><td>react-native-harmony-bridge</td><td>鸿蒙</td><td>鸿蒙桥接工具</td><td>⭐⭐⭐</td></tr><tr><td>模块通信</td><td>react-native-eventemitter</td><td>全平台</td><td>原生-RN事件通信</td><td>⭐⭐⭐⭐</td></tr><tr><td>启动优化</td><td>react-native-splash-screen</td><td>Android/iOS</td><td>启动屏控制</td><td>⭐⭐⭐⭐</td></tr><tr><td>设备信息交互</td><td>react-native-device-info</td><td>Android/iOS</td><td>获取设备信息（型号、系统版本），用于适配或统计</td><td>⭐⭐⭐⭐⭐</td></tr></tbody></table><h3 id="热更新与部署" tabindex="-1">热更新与部署 <a class="header-anchor" href="#热更新与部署" aria-label="Permalink to &quot;热更新与部署&quot;">​</a></h3><table tabindex="0"><thead><tr><th>分类</th><th>工具名称</th><th>适用平台</th><th>功能描述</th><th>稳定性评级</th></tr></thead><tbody><tr><td>热更新</td><td>Microsoft CodePush</td><td>Android/iOS</td><td>云服务热更新</td><td>⭐⭐⭐⭐⭐</td></tr><tr><td>热更新</td><td>Pushy (国内推荐)</td><td>Android/iOS</td><td>国内热更新方案</td><td>⭐⭐⭐⭐</td></tr><tr><td>鸿蒙更新</td><td>华为AppGallery Connect</td><td>鸿蒙</td><td>鸿蒙应用热更新</td><td>⭐⭐⭐⭐</td></tr><tr><td>版本控制</td><td>react-native-version</td><td>全平台</td><td>版本管理自动化</td><td>⭐⭐⭐⭐</td></tr></tbody></table><h3 id="ui组件与性能" tabindex="-1">UI组件与性能 <a class="header-anchor" href="#ui组件与性能" aria-label="Permalink to &quot;UI组件与性能&quot;">​</a></h3><table tabindex="0"><thead><tr><th>分类</th><th>工具名称</th><th>适用平台</th><th>功能描述</th><th>稳定性评级</th></tr></thead><tbody><tr><td>UI组件库</td><td>Ant Design Mobile RN<br>Taro UI</td><td>全平台</td><td>Material Design组件</td><td>⭐⭐⭐⭐</td></tr><tr><td>性能监控</td><td>React Native Performance</td><td>全平台</td><td>性能指标监控</td><td>⭐⭐⭐⭐</td></tr><tr><td>图片加载</td><td>react-native-fast-image</td><td>全平台</td><td>高性能图片加载</td><td>⭐⭐⭐⭐⭐</td></tr><tr><td>列表优化</td><td>FlashList</td><td>全平台</td><td>高性能列表组件</td><td>⭐⭐⭐⭐⭐</td></tr></tbody></table><div class="tip custom-block"><p class="custom-block-title">提示</p><p>注意：选择依赖和库以稳定性为首要考虑，尽量选择纯逻辑库，降低适配成本。</p></div><h2 id="二、原生app与rn交互接口设计" tabindex="-1">二、原生APP与RN交互接口设计 <a class="header-anchor" href="#二、原生app与rn交互接口设计" aria-label="Permalink to &quot;二、原生APP与RN交互接口设计&quot;">​</a></h2><h3 id="_1-接口设计" tabindex="-1">1. 接口设计 <a class="header-anchor" href="#_1-接口设计" aria-label="Permalink to &quot;1. 接口设计&quot;">​</a></h3><ul><li><strong>单一职责原则：</strong> 使接口边界清晰，解耦业务逻辑与技术实现，实现”高内聚低耦合“</li><li><strong>标准化参数规范：</strong> JSON 格式统一数据交换，错误码体系便于错误定位</li><li><strong>版本兼容性考虑：</strong> 接口灰度发布能力，避免 &quot;全有或全无&quot; 的强更新，尽量做加法，保留多个版本，必要时可回滚到旧版本</li></ul><h3 id="_2-核心交互" tabindex="-1">2. 核心交互 <a class="header-anchor" href="#_2-核心交互" aria-label="Permalink to &quot;2. 核心交互&quot;">​</a></h3><ol><li>RN 调用原生能力（Method Call）通过原生 Module 暴露接口，RN 通过NativeModules调用</li><li>原生通知 RN 事件（Event Emit）通过DeviceEventEmitter发送事件，RN 监听接收</li></ol><div class="tip custom-block"><p class="custom-block-title">提示</p><p>注意：敏感操作（支付/定位）由原生完全控制，RN 仅作为交互层，不接触核心业务逻辑。</p></div><h2 id="三、实施步骤与保障措施" tabindex="-1">三、实施步骤与保障措施 <a class="header-anchor" href="#三、实施步骤与保障措施" aria-label="Permalink to &quot;三、实施步骤与保障措施&quot;">​</a></h2><ol><li>分阶段实施</li></ol><ul><li>阶段1：基础集成 <ul><li>搭建 RN 开发环境（Node、watchman、cocoaPods、Xcode/Android Studio 配置），可运行到Android和IOS设备</li><li>实现将一个简单页面集成到原生APP</li><li>实现部分接口交互，如获取用户信息等</li></ul></li><li>阶段2：功能验证 <ul><li>验证三端功能完整性，样式统一性。</li><li>热部署更新服务，如Code Push或者自建服务器</li></ul></li></ul><div class="warning custom-block"><p class="custom-block-title">提示</p><p>React Native 开发人员大遗憾：微软宣布将于 2025 年 3 月 31 日关闭Visual Studio App Center。</p></div>',31)]))}const _=d(l,[["render",n]]);export{m as __pageData,_ as default};
